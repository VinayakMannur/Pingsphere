{"version":3,"file":"static/js/553.ce45ecfd.chunk.js","mappings":"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","sources":["pages/dashboard/Profile.js","../node_modules/phosphor-react/src/icons/CaretLeft.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Box,\r\n  IconButton,\r\n  Avatar,\r\n  Stack,\r\n  Typography,\r\n  Input,\r\n  Button,\r\n} from \"@mui/material\";\r\nimport { faker } from \"@faker-js/faker\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { Camera, CaretLeft } from \"phosphor-react\";\r\nimport ProfileForm from \"../../components/forms/ProfileForm\";\r\nimport useResponsive from \"../../hooks/useResponsive\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  UpdateOneToOneChats,\r\n  UpdateProfile,\r\n  UpdateSelfInfo,\r\n} from \"../../redux/slices/app\";\r\nimport { socket } from \"../../socket\";\r\nimport axios from \"axios\";\r\n\r\nconst Profile = () => {\r\n  const dispatch = useDispatch();\r\n  const theme = useTheme();\r\n  const isMobile = useResponsive(\"between\", \"md\", \"xs\", \"sm\");\r\n  const user_id = parseInt(window.localStorage.getItem(\"user_id\"));\r\n  const [selectedFile, setSelectedFile] = useState(null);\r\n\r\n  useEffect(() => {\r\n    socket.emit(\"get_self_info\", { user_id }, (data) => {\r\n      // console.log(data);\r\n      dispatch(UpdateSelfInfo(data));\r\n    });\r\n  }, []);\r\n\r\n  const { name, email, phoneNumber } = useSelector(\r\n    (state) => state.app.selfInfo\r\n  );\r\n\r\n  // const handleFileChange = (event) => {\r\n  //   const file = event.target.files[0];\r\n  //   setSelectedFile(file);\r\n    \r\n  //   // console.log(selectedFile);\r\n\r\n\r\n  // };\r\n\r\n  // const logFormData = (formData) => {\r\n  //   console.log(\"Logging FormData synchronously:\", formData);\r\n  // };\r\n\r\n  // const handleUpload =  (e) => {\r\n  //   e.preventDefault()\r\n  //   // Handle the file upload logic (e.g., send the file to the server)\r\n  //   if (selectedFile) {\r\n     \r\n  //     const formData = new FormData();\r\n  //     formData.append(\"filee\", selectedFile);\r\n      \r\n      \r\n  //     console.log(\"Uploading file2:\", selectedFile);\r\n  //     logFormData(formData);\r\n  //      axios.post(\"http://localhost:5000/user/upload\",{\r\n  //       file: selectedFile\r\n  //     }, {\r\n  //       headers: {\r\n  //         'Content-Type': 'multipart/form-data',\r\n  //       },\r\n  //     })\r\n  //       .then((response) => {\r\n  //         console.log(response);\r\n  \r\n  //       })\r\n  //       .catch((error) => {\r\n  //         console.log(error);\r\n  //       });\r\n     \r\n \r\n  //     // setTimeout(() => {\r\n  //     //   // Dispatch the action\r\n  //       console.log(selectedFile);\r\n  //     // }, 2000);\r\n  //     // dispatch(UpdateProfile(selectedFile));\r\n  //     // Implement your upload logic here\r\n  //     // try {\r\n       \r\n  //     // } catch (error) {\r\n  //     //   console.log(error);\r\n  //     // }\r\n  //   }\r\n    \r\n  // };\r\n\r\n  return (\r\n    <>\r\n      <Stack direction={\"row\"} width={\"100%\"}>\r\n        {/* left */}\r\n        <Box\r\n          sx={{\r\n            width: isMobile ? \"100%\" : 320,\r\n            height: \"100vh\",\r\n            // overflow: \"scroll\",\r\n            backgroundColor:\r\n              theme.palette.mode === \"light\"\r\n                ? \"#F8FAFF\"\r\n                : theme.palette.background.paper,\r\n            boxShadow: \"0px 0px 2px rgba(0, 0, 0, 0.5)\",\r\n          }}\r\n        >\r\n          <Stack p={3} spacing={2} sx={{ height: \"100vh\" }}>\r\n            {/* header */}\r\n            <Stack spacing={2} direction={\"row\"} alignItems={\"center\"}>\r\n              <IconButton\r\n                onClick={() => {\r\n                  dispatch(UpdateOneToOneChats());\r\n                }}\r\n              >\r\n                <CaretLeft size={24} color=\"#4B4B4B\" />\r\n              </IconButton>\r\n              <Typography variant=\"h5\">Profile</Typography>\r\n            </Stack>\r\n\r\n            {/* form */}\r\n            {/* <ProfileForm/> */}\r\n            {/* <form onSubmit={handleUpload}> */}\r\n              <Stack\r\n                elevation={3}\r\n                alignItems={\"center\"}\r\n                sx={{\r\n                  padding: 2,\r\n                  position: \"relative\",\r\n                  maxWidth: 300,\r\n                  margin: \"auto\",\r\n                }}\r\n              >\r\n                <Stack position=\"relative\" alignItems=\"flex-end\">\r\n                  <Avatar\r\n                    alt={faker.name.firstName()}\r\n                    src={faker.image.city()}\r\n                    sx={{ width: 150, height: 150 }}\r\n                  />\r\n                  <label htmlFor=\"file-input\">\r\n                    <IconButton\r\n                      color=\"primary\"\r\n                      component=\"span\"\r\n                      aria-label=\"upload picture\"\r\n                      sx={{ position: \"absolute\", bottom: 0, right: 0 }}\r\n                    >\r\n                      <Camera color=\"#3f6473\" weight=\"bold\" />\r\n                    </IconButton>\r\n                  </label>\r\n                  <Input\r\n                    type=\"file\"\r\n                    id=\"file-input\"\r\n                    accept=\"image/*\"\r\n                    style={{ display: \"none\" }}\r\n                    // onChange={handleFileChange}\r\n                  />\r\n                </Stack>\r\n                  {/* <Button variant=\"outlined\" type=\"submit\" onSubmit={handleUpload}>Save</Button> */}\r\n              </Stack>\r\n            {/* </form> */}\r\n            <Stack alignItems={\"center\"} direction={\"row\"} p={1} spacing={3}>\r\n              {/* <Avatar\r\n                alt={faker.name.firstName()}\r\n                src={faker.image.city()}\r\n                sx={{ height: 80, width: 80 }}\r\n              /> */}\r\n              <Stack direction={\"column\"} spacing={0.5}>\r\n                <Typography variant=\"article\">{name}</Typography>\r\n                <Typography variant=\"body2\">{email}</Typography>\r\n                <Typography variant=\"body2\">{`+91 ${phoneNumber}`}</Typography>\r\n              </Stack>\r\n            </Stack>\r\n          </Stack>\r\n        </Box>\r\n      </Stack>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","/* GENERATED FILE */\nimport React, { forwardRef } from \"react\";\n\nimport {\n  IconWeight,\n  IconProps,\n  PaintFunction,\n  renderPathForWeight,\n} from \"../lib\";\nimport IconBase, { RenderFunction } from \"../lib/IconBase\";\n\nconst pathsByWeight = new Map<IconWeight, PaintFunction>();\n\npathsByWeight.set(\"bold\", (color: string) => (\n  <>\n    <polyline\n      points=\"160 208 80 128 160 48\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"24\"\n    />\n  </>\n));\n\npathsByWeight.set(\"duotone\", (color: string) => (\n  <>\n    <polygon points=\"160 208 80 128 160 48 160 208\" opacity=\"0.2\" />\n    <polygon\n      points=\"160 208 80 128 160 48 160 208\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n  </>\n));\n\npathsByWeight.set(\"fill\", () => (\n  <>\n    <path d=\"M163.1,40.6a8.4,8.4,0,0,0-8.8,1.7l-80,80a8.1,8.1,0,0,0,0,11.4l80,80A8.3,8.3,0,0,0,160,216a8.5,8.5,0,0,0,3.1-.6A8,8,0,0,0,168,208V48A8,8,0,0,0,163.1,40.6Z\" />\n  </>\n));\n\npathsByWeight.set(\"light\", (color: string) => (\n  <>\n    <polyline\n      points=\"160 208 80 128 160 48\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"12\"\n    />\n  </>\n));\n\npathsByWeight.set(\"thin\", (color: string) => (\n  <>\n    <polyline\n      points=\"160 208 80 128 160 48\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"8\"\n    />\n  </>\n));\n\npathsByWeight.set(\"regular\", (color: string) => (\n  <>\n    <polyline\n      points=\"160 208 80 128 160 48\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n  </>\n));\n\nconst renderPath: RenderFunction = (weight: IconWeight, color: string) =>\n  renderPathForWeight(weight, color, pathsByWeight);\n\nconst CaretLeft = forwardRef<SVGSVGElement, IconProps>((props, ref) => (\n  <IconBase ref={ref} {...props} renderPath={renderPath} />\n));\n\nCaretLeft.displayName = \"CaretLeft\";\n\nexport default CaretLeft;\n"],"names":["dispatch","useDispatch","theme","useTheme","isMobile","useResponsive","user_id","parseInt","window","localStorage","getItem","useState","useEffect","socket","data","UpdateSelfInfo","useSelector","state","app","selfInfo","name","email","phoneNumber","direction","width","Box","sx","height","backgroundColor","palette","mode","background","paper","boxShadow","p","spacing","alignItems","IconButton","onClick","UpdateOneToOneChats","size","color","variant","elevation","padding","position","maxWidth","margin","Avatar","alt","faker","src","htmlFor","component","bottom","right","weight","Input","type","id","accept","style","display","pathsByWeight","Map","set","React","points","fill","stroke","strokeLinecap","strokeLinejoin","strokeWidth","opacity","d","renderPath","renderPathForWeight","CaretLeft","forwardRef","props","ref","IconBase","displayName"],"sourceRoot":""}