{"version":3,"file":"static/js/697.4e16bace.chunk.js","mappings":"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","sources":["../node_modules/phosphor-react/src/icons/Plus.tsx","components/GroupChats.js","pages/dashboard/Group.js"],"sourcesContent":["/* GENERATED FILE */\nimport React, { forwardRef } from \"react\";\n\nimport {\n  IconWeight,\n  IconProps,\n  PaintFunction,\n  renderPathForWeight,\n} from \"../lib\";\nimport IconBase, { RenderFunction } from \"../lib/IconBase\";\n\nconst pathsByWeight = new Map<IconWeight, PaintFunction>();\n\npathsByWeight.set(\"bold\", (color: string) => (\n  <>\n    <line\n      x1=\"40\"\n      y1=\"128\"\n      x2=\"216\"\n      y2=\"128\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"24\"\n    />\n    <line\n      x1=\"128\"\n      y1=\"40\"\n      x2=\"128\"\n      y2=\"216\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"24\"\n    />\n  </>\n));\n\npathsByWeight.set(\"duotone\", (color: string) => (\n  <>\n    <line\n      x1=\"40\"\n      y1=\"128\"\n      x2=\"216\"\n      y2=\"128\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n    <line\n      x1=\"128\"\n      y1=\"40\"\n      x2=\"128\"\n      y2=\"216\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n  </>\n));\n\npathsByWeight.set(\"fill\", () => (\n  <>\n    <path d=\"M216,120H136V40a8,8,0,0,0-16,0v80H40a8,8,0,0,0,0,16h80v80a8,8,0,0,0,16,0V136h80a8,8,0,0,0,0-16Z\" />\n  </>\n));\n\npathsByWeight.set(\"light\", (color: string) => (\n  <>\n    <line\n      x1=\"40\"\n      y1=\"128\"\n      x2=\"216\"\n      y2=\"128\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"12\"\n    />\n    <line\n      x1=\"128\"\n      y1=\"40\"\n      x2=\"128\"\n      y2=\"216\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"12\"\n    />\n  </>\n));\n\npathsByWeight.set(\"thin\", (color: string) => (\n  <>\n    <line\n      x1=\"40\"\n      y1=\"128\"\n      x2=\"216\"\n      y2=\"128\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"8\"\n    />\n    <line\n      x1=\"128\"\n      y1=\"40\"\n      x2=\"128\"\n      y2=\"216\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"8\"\n    />\n  </>\n));\n\npathsByWeight.set(\"regular\", (color: string) => (\n  <>\n    <line\n      x1=\"40\"\n      y1=\"128\"\n      x2=\"216\"\n      y2=\"128\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n    <line\n      x1=\"128\"\n      y1=\"40\"\n      x2=\"128\"\n      y2=\"216\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n  </>\n));\n\nconst renderPath: RenderFunction = (weight: IconWeight, color: string) =>\n  renderPathForWeight(weight, color, pathsByWeight);\n\nconst Plus = forwardRef<SVGSVGElement, IconProps>((props, ref) => (\n  <IconBase ref={ref} {...props} renderPath={renderPath} />\n));\n\nPlus.displayName = \"Plus\";\n\nexport default Plus;\n","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Autocomplete,\r\n  Box,\r\n  Button,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogContentText,\r\n  DialogTitle,\r\n  Divider,\r\n  IconButton,\r\n  Link,\r\n  Slide,\r\n  Stack,\r\n  TextField,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { MagnifyingGlass, Plus } from \"phosphor-react\";\r\nimport { ChatList } from \"../data\";\r\nimport { SimpleBarStyle } from \"./Scrollbar\";\r\nimport { Search, SearchIconWrapper, StyledInputBase } from \"./search\";\r\nimport ChatElement from \"./ChatElement\";\r\nimport useResponsive from \"../hooks/useResponsive\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { CreateGroup } from \"../redux/slices/conversation\";\r\nimport { socket } from \"../socket\";\r\nimport { getFriends } from \"../redux/slices/app\";\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nconst CreateGroupDialog = ({ open, handleClose }) => {\r\n  const dispatch = useDispatch();\r\n  const [groupName, setGroupName] = useState(\"\");\r\n  const [selectedMembers, setSelectedMembers] = useState([]);\r\n  const user_id = window.localStorage.getItem(\"user_id\")\r\n\r\n  useEffect(()=>{\r\n    dispatch(getFriends());\r\n  },[])\r\n\r\n  const { friends } = useSelector((state) => state.app);\r\n  // console.log(friends);\r\n\r\n  const handleSubmit = () => {\r\n    // console.log(\"Group Name:\", groupName);\r\n    // console.log(\"Selected Members:\", selectedMembers);\r\n    socket.emit(\"create_group\", {groupName, selectedMembers, user_id: parseInt(user_id)})\r\n    handleClose();\r\n  };\r\n\r\n  return (\r\n    <Dialog\r\n      open={open}\r\n      TransitionComponent={Transition}\r\n      keepMounted\r\n      onClose={handleClose}\r\n      aria-describedby=\"alert-dialog-slide-description\"\r\n    >\r\n      <DialogTitle>Create Group</DialogTitle>\r\n      <DialogContent>\r\n        <div id=\"alert-dialog-slide-description\">\r\n          <Stack mt={2} spacing={3} sx={{ width: 500 }}>\r\n            <Typography variant=\"body2\">\r\n              Enter the group name and the members\r\n            </Typography>\r\n            <TextField\r\n              required\r\n              id=\"groupname\"\r\n              label=\"Group Name\"\r\n              variant=\"outlined\"\r\n              onChange={(e) => setGroupName(e.target.value)}\r\n            />\r\n        \r\n            <Autocomplete\r\n              multiple\r\n              id=\"tags-outlined\"\r\n              options={friends}\r\n              getOptionLabel={(option) => `${option.firstName} ${option.lastName}`}\r\n              filterSelectedOptions\r\n              onChange={(event, newValue) => setSelectedMembers(newValue)}\r\n              renderInput={(params) => (\r\n                <TextField\r\n                  {...params}\r\n                  label=\"Add Members to your group\"\r\n                  placeholder=\"Add Members\"\r\n                />\r\n              )}\r\n            />\r\n          </Stack>\r\n        </div>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button onClick={handleClose}>Close</Button>\r\n        <Button type=\"submit\" onClick={handleSubmit} variant=\"contained\">\r\n          Create\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nconst GroupChats = () => {\r\n  const theme = useTheme();\r\n  const [openCreateGroup, setOpenCreateGroup] = useState(false);\r\n  const isMobile = useResponsive(\"between\", \"md\", \"xs\", \"sm\");\r\n\r\n  const handleCloseCreateGroupDialog = () => {\r\n    setOpenCreateGroup(false);\r\n  };\r\n  \r\n  const {groupList} = useSelector((state)=> state.conversation.group_chat)\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        position: \"relative\",\r\n        width: isMobile ? \"100%\" : 320,\r\n        backgroundColor:\r\n          theme.palette.mode === \"light\"\r\n            ? \"#F8FAFF\"\r\n            : theme.palette.background.paper,\r\n        boxShadow: \"0px 0px 2px rgba(0, 0, 0, 0.5)\",\r\n      }}\r\n    >\r\n      <Stack p={3} spacing={2} sx={{ height: \"100vh\" }}>\r\n        <Stack\r\n          direction={\"row\"}\r\n          alignItems={\"center\"}\r\n          justifyContent={\"space-between\"}\r\n        >\r\n          <Typography variant=\"h5\">Group Chats</Typography>\r\n        </Stack>\r\n        <Stack sx={{ width: \"100%\" }}>\r\n          <Search>\r\n            <SearchIconWrapper>\r\n              <MagnifyingGlass color=\"#709CE6\" />\r\n            </SearchIconWrapper>\r\n            <StyledInputBase placeholder=\"Search...\" />\r\n          </Search>\r\n        </Stack>\r\n        <Stack spacing={1}>\r\n          <Stack\r\n            direction={\"row\"}\r\n            alignItems={\"center\"}\r\n            justifyContent={\"space-between\"}\r\n          >\r\n            <Typography variant=\"body2\" component={Link}>\r\n              Create new group\r\n            </Typography>\r\n            <IconButton\r\n              onClick={() => {\r\n                setOpenCreateGroup(true);\r\n              }}\r\n            >\r\n              <Plus size={20} style={{ color: theme.palette.primary.main }} />\r\n            </IconButton>\r\n          </Stack>\r\n          <Divider />\r\n        </Stack>\r\n        <Stack\r\n          direction={\"column\"}\r\n          spacing={1.2}\r\n          sx={{\r\n            height: \"100%\",\r\n            flexGrow: 1,\r\n            overflowY: 'scroll', \r\n            scrollbarWidth: \"thin\",\r\n            \"&::-webkit-scrollbar\": {\r\n              width: \"0.4em\",\r\n            },\r\n            \"&::-webkit-scrollbar-track\": {\r\n              background: \"#f1f1f1\",\r\n            },\r\n            \"&::-webkit-scrollbar-thumb\": {\r\n              backgroundColor: \"#888\",\r\n            },\r\n            \"&::-webkit-scrollbar-thumb:hover\": {\r\n              background: \"#555\",\r\n            },\r\n          }}\r\n        >\r\n          <SimpleBarStyle timeout={500} clickOnTrack={false}>\r\n            {/* <Stack spacing={1}>\r\n              <Typography variant=\"subtitle2\" sx={{ color: \"#767676\" }}>\r\n                Pinned\r\n              </Typography>\r\n              {ChatList.filter((el) => el.pinned).map((el) => {\r\n                return <ChatElement {...el} />;\r\n              })}\r\n            </Stack> */}\r\n            <Stack spacing={1}>\r\n              <Typography variant=\"subtitle2\" sx={{ color: \"#767676\" }}>\r\n                All Groups\r\n              </Typography>\r\n              {groupList.filter((el) => !el.pinned).map((el, idx) => {\r\n                return <ChatElement key={idx} {...el} />;\r\n              })}\r\n            </Stack>\r\n          </SimpleBarStyle>\r\n        </Stack>\r\n      </Stack>\r\n      {openCreateGroup && (\r\n        <CreateGroupDialog\r\n          open={openCreateGroup}\r\n          handleClose={handleCloseCreateGroupDialog}\r\n        />\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default GroupChats;\r\n","import { Box, Stack, Typography } from \"@mui/material\";\r\nimport React, { useEffect } from \"react\";\r\nimport GroupChats from \"../../components/GroupChats\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { UpdateConversation } from \"../../redux/slices/app\";\r\nimport { socket } from \"../../socket\";\r\nimport { UpdateGroupList } from \"../../redux/slices/conversation\";\r\nimport Conversation from \"../../components/conversation\";\r\nimport NoChatSVG from \"../../assets/Illustration/NoChat\";\r\nimport useResponsive from \"../../hooks/useResponsive\";\r\nimport StarredMessage from \"../../components/StarredMessages\";\r\nimport SharedMessage from \"../../components/SharedMessage\";\r\nimport Contact from \"../../components/Contact\";\r\n\r\nconst Group = () => {\r\n  const theme = useTheme();\r\n  const dispatch = useDispatch();\r\n\r\n  const user_id = window.localStorage.getItem(\"user_id\");\r\n  const { sidebar, chat_type } = useSelector((store) => store.app);\r\n  const { group, contact } = useSelector((store) => store.app.mobile);\r\n  const { groupId } = useSelector((state) => state.conversation.group_chat);\r\n\r\n  useEffect(() => {\r\n    dispatch(UpdateConversation());\r\n    socket.emit(\"get_group_list\", { user_id }, (data) => {\r\n      // console.log(data);\r\n      dispatch(UpdateGroupList(data));\r\n    });\r\n  }, []);\r\n\r\n  const isMobile = useResponsive(\"between\", \"md\", \"xs\", \"sm\");\r\n\r\n  return (\r\n    <>\r\n      <Stack direction={\"row\"} sx={{ width: \"100%\" }}>\r\n\r\n        {/* left */}\r\n        {isMobile && chat_type === \"group\" && group === \"chats\" ? (\r\n          <GroupChats />\r\n        ) : (\r\n          <></>\r\n        )}\r\n        {!isMobile && <GroupChats />}\r\n\r\n        {/* right */}\r\n        {isMobile && chat_type === \"group\" && contact === null && group === \"conversation\" ? (\r\n          <Box\r\n            sx={{\r\n              height: isMobile?\"100vh\":\"100%\",\r\n              width: \"100%\",\r\n              backgroundColor:\r\n                theme.palette.mode === \"light\"\r\n                  ? \"#F0F4FA\"\r\n                  : theme.palette.background.default,\r\n            }}\r\n          >\r\n            {groupId !== null && chat_type === \"group\" ? (\r\n              <Conversation />\r\n            ) : (\r\n              <Stack\r\n                spacing={2}\r\n                sx={{ height: \"100%\", width: \"100%\" }}\r\n                alignItems={\"center\"}\r\n                justifyContent={\"center\"}\r\n              >\r\n                <NoChatSVG />\r\n                <Typography variant=\"subtitle2\">\r\n                  Select a conversation or start a new one\r\n                </Typography>\r\n              </Stack>\r\n            )}\r\n          </Box>\r\n        ) : (\r\n          <></>\r\n        )}\r\n\r\n        {!isMobile && (\r\n          <Box\r\n            sx={{\r\n              height: \"100%\",\r\n              width: sidebar.open\r\n                ? \"calc(100vw - 720px)\"\r\n                : \"calc(100vw - 405px)\",\r\n              backgroundColor:\r\n                theme.palette.mode === \"light\"\r\n                  ? \"#F0F4FA\"\r\n                  : theme.palette.background.default,\r\n            }}\r\n          >\r\n            {groupId !== null && chat_type === \"group\" ? (\r\n              <Conversation />\r\n            ) : (\r\n              <Stack\r\n                spacing={2}\r\n                sx={{ height: \"100%\", width: \"100%\" }}\r\n                alignItems={\"center\"}\r\n                justifyContent={\"center\"}\r\n              >\r\n                <NoChatSVG />\r\n                <Typography variant=\"subtitle2\">\r\n                  Select a conversation or start a new one\r\n                </Typography>\r\n              </Stack>\r\n            )}\r\n          </Box>\r\n        )}\r\n        {isMobile && (contact === \"onetoone\" || contact === \"group\") ? <Contact />: <></>}\r\n\r\n        {!isMobile && sidebar.open &&\r\n        (() => {\r\n          switch (sidebar.type) {\r\n            case \"CONTACT\":\r\n              return <Contact />;\r\n            case \"STARRED\":\r\n              return <StarredMessage />;\r\n            case \"SHARED\":\r\n              return <SharedMessage />;\r\n            default:\r\n              break;\r\n          }\r\n        })()}\r\n      </Stack>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Group;\r\n"],"names":["pathsByWeight","Map","set","color","React","x1","y1","x2","y2","fill","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","renderPath","weight","renderPathForWeight","Plus","forwardRef","props","ref","IconBase","displayName","Transition","Slide","direction","CreateGroupDialog","open","handleClose","dispatch","useDispatch","useState","groupName","setGroupName","selectedMembers","setSelectedMembers","user_id","window","localStorage","getItem","useEffect","getFriends","friends","useSelector","state","app","Dialog","TransitionComponent","keepMounted","onClose","DialogTitle","DialogContent","id","Stack","mt","spacing","sx","width","Typography","variant","TextField","required","label","onChange","e","target","value","Autocomplete","multiple","options","getOptionLabel","option","firstName","lastName","filterSelectedOptions","event","newValue","renderInput","params","placeholder","DialogActions","Button","onClick","type","socket","parseInt","theme","useTheme","openCreateGroup","setOpenCreateGroup","isMobile","useResponsive","groupList","conversation","group_chat","Box","position","backgroundColor","palette","mode","background","paper","boxShadow","p","height","alignItems","justifyContent","component","Link","IconButton","size","style","primary","main","Divider","flexGrow","overflowY","scrollbarWidth","timeout","clickOnTrack","filter","el","pinned","map","idx","ChatElement","store","sidebar","chat_type","mobile","group","contact","groupId","UpdateConversation","data","UpdateGroupList","default","NoChat","Contact","SharedMessage"],"sourceRoot":""}